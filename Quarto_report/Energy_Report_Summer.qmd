---
title: "Energy Audit Report"
format:
  html: default
  pdf: default
  docx:
    number-sections: true
    number-depth: 3
    number-offset: 0
css: styles.css
tbl-colwidths: [75,25]
editor: source
params:
  adress: "Me_test1"
  author: "Rudolfs"
---

```{r}
#| label: load packages
#| echo: false
#| warning: false

#Attach Packages
library(readr)
library(here)
library(dplyr)
library(ggplot2)
library(stringr)
library(readxl)
library(tidyverse)
library(gridExtra)
library(grid)
library(jpeg)
library(cowplot)
library(googlesheets4)
library(reticulate)
library(gt)
library(tibble)
library(kableExtra)
library(janitor)

```

```{r}
#| label: load googlesheets data
#| echo: false
#| warning: false
#| eval: true

#Load Data
all_energy_test_googlesheets <- read_sheet("https://docs.google.com/spreadsheets/d/1Q4Kn8YNwurZ2DdfKoujyfyszxS0EKyuidWiohRoIuh8/edit?resourcekey=&gid=1384599070#gid=1384599070", col_types = "c")

energy_test_googlesheets <- all_energy_test_googlesheets[12, ]

clean_audit_data <- janitor::clean_names(energy_test_googlesheets)

#Building_Audit <- Energy_Audits |> #to make it parametorized
  #filter(Adress_Name == params$adress) # Auditor_full_name == params$Auditor_full_name


```

```{r}
#| label: setup rank recommendations data
#| echo: false
#| warning: false

recommendations <- energy_test_googlesheets |>
  #filter(Adress_Name == params$adress) |> #need to parametorize
  select(c("Recommendations ranking [Furnace/Boiler Tune-up]":"Recommendations ranking [Other]", 'Recommendations ranking [Continuous Exterior Wall Insulation]'))

pivot_recommendations <- recommendations |>
  pivot_longer(cols = everything(),
    names_to = "Recommendation", 
    values_to = "Rank")

pivot_recommendations['Description'] <- c("Have the furnace and flue inspected and adjusted by a licensed professional. This should be available from your oil or propane delivery company.","Install high efficiency low flow shower heads to reduce the amount of water and energy to heat this water used when showering. This will save a typical home more than $200/year.","Switch your light bulbs to LED light bulbs. LEDs use 80% less energy than incandescent light bulbs which can significantly reduce your electricity bill. We provide free LED light bulbs, contact us for some if we did not give you any during the audit.","Getting insulating window inserts that help air-seal windows and reduce heat loss and gain. There will be a Window Dresser build on Great Cranberry Island September 28th-October 2nd. Sign up at https://windowdressers.org/sign-up-for-inserts/ There will be a Window Dressers build in Eastport November 18 to 25. Contact Pete to sign up: 207-214-4751 or EastportMEEnergy@gmail.com","Replacing your refrigerator with a new, EnergyStar certified fridge. Look at the Energy Guide label to compare the energy use of new refrigerators.","Replacing your freezer with a new, EnergyStar certified freezer. Look at the Energy Guide label to compare the energy use of new freezers.","Induction stoves are more efficient and safer than electric or gas stoves. There is no risk of carbon monoxide or other harmful combustion gases","Install a heat pump water heater to provide your hot water for cooking and bathing. This is the most efficient way to heat water and will save hundreds of dollars a year compared to electric resistance, heating oil or propane hot water. It will also help to dehumidify while it's running. If your current water heater burns oil or propane, this will also remove a source of combustion gases from your home.","Install gutters and downspouts that divert water at least six feet away from the foundation and to where the ground slopes away from the house.","Bathroom exhaust fans should be rated for at least 50 cubic feet per minute (CFM). We recommend Panasonic WhisperQuiet or similar fans that don’t create excess noise.","We recommend a kitchen exhaust fan to remove harmful combustion gases from your home. A fan can also help with moisture concerns.","Install a vapor barrier on the basement floor to stop moisture from entering the basement and house.","Install spray foam on the basement walls.","Air seal the attic and insulate it to at least R-60 (18” of loose-fill cellulose insulation).","Insulate the wall stud cavities with dense packed, blown-in cellulose insulation. This can often be done from the attic.","Add a continuous layer of insulation and potentially replace the air and moisture barrier once it becomes time to replace the siding.","Replace your existing electrical panel to increase the capacity to 200 amps (and address potential safety hazards). This may be eligible for a 30% tax credit up to $600.","Install # air source heat pumps and whole-house surge protection.","An electric vehicle will eliminate your gas costs and reduce fossil fuel dependence. A 2020 study by Consumer Reports found that lifetime ownership costs were significantly lower for EVs, saving between $6,000 - $10,000 over their lifetimes.","Rooftop solar can provide most or all of your home electrical usage. Contact a solar company for pricing and details specific to your home.", "TYPE HERE")

ranked_recommendations <- pivot_recommendations |>
  mutate(Recommendation = recode(Recommendation,  'Recommendations ranking [Furnace/Boiler Tune-up]' = 'Furnace/Boiler Tune-up', 'Recommendations ranking [High Efficiency Showerhead(s)]' = 'High efficiency  shower head(s)', 'Recommendations ranking [LEDs]' = 'LEDs', 'Recommendations ranking [Window Dressers]' = 'Window Dressers', 'Recommendations ranking [Refrigerator]' = 'Refrigerator', 'Recommendations ranking [Freezer]' = 'Freezer', 'Recommendations ranking [Induction Stove]' = 'Induction Stove', 'Recommendations ranking [Heat Pump Water Heater]' = 'Heat Pump Water Heater', 'Recommendations ranking [Gutters]' = 'Gutters', 'Recommendations ranking [Bathroom Exhaust Fan]' = 'Bathroom exhaust fan(s)', 'Recommendations ranking [Kitchen Exhaust Fan]' = 'Kitchen exhaust fan', 'Recommendations ranking [Vapor Barrier]' = 'Vapor Barrier', 'Recommendations ranking [Spray Foam Basement Walls]' = 'Spray Foam Basement Walls', 'Recommendations ranking [Attic Air Sealing and Insulation ]' = 'Attic Insulation', 'Recommendations ranking [Blown-in Cellulose Wall Insulation]' = 'Blow-in cellulose wall insulation','Recommendations ranking [Continuous Exterior Wall Insulation]' = 'Continuous exterior wall insulation', 'Recommendations ranking [Electrical Panel Upgrade]' = 'Electrical Panel Upgrade', 'Recommendations ranking [Air Source Heat Pump]'= 'Air Source Heat Pump', 'Recommendations ranking [EV Charger]' = 'EV+charger', 'Recommendations ranking [Solar]' = 'Solar', 'Recommendations ranking [Other]' = 'Other')) |>
  mutate_at('Rank', as.numeric)|>
    arrange((Rank))

ranked_clean_recommendations <- ranked_recommendations|>
   filter(Rank != 0)|>
   select(-Rank)
```

```{r}
#| label: Setup basics data
#| echo: false
#| warning: false
#| eval: true

double_basics <- energy_test_googlesheets |>
  select(`Date Built`, `Number of floors`, `Volume of conditioned space (cubic feet)`, `Square footage of conditioned space`, `Thickness of the attic insulation (inches), at the thinnest location`, `Gallons of Heating Oil`,`Cost in Dollars (Heating Oil)`,`Gallons of Kerosene`,`Cost in Dollars (Kerosene)`,`Gallons of Propane`,`Cost in Dollars (Propane)`,`kWh of Electricity`,`Cost in Dollars (Electricity)`,`Cords of Firewood`,`Cost in Dollars (Firewood)`,`Tons of pellets`,`Cost in Dollars (Pellets)`,`Write the quantity and measuring unit`, `Cost in Dollars (Other)` )

double_other <- energy_test_googlesheets |>
  select(`Date Built`, `Number of floors`, `Volume of conditioned space (cubic feet)`, `Square footage of conditioned space`)|>
  pivot_longer(cols = everything(),
    names_to = "Info", 
    values_to = "Values")


```

```{r}
#| label: attic data for basics
#| echo: false

attic_basics <- energy_test_googlesheets |>
  select( `Attic insulation type`, `Quality of attic insulation's installation? Assess worst part of installation.`, `Thickness of the attic insulation (inches), at the thinnest location`)|>
  mutate(Attic_all = paste(`Attic insulation type`, ",", `Thickness of the attic insulation (inches), at the thinnest location`, "inches"))|>
  mutate(Info = 'Attic',
        .before =`Attic insulation type`)

attic_basics <- attic_basics[,-c(2,3,4)]

names(attic_basics) <- c('Info', 'Values')
  

```

```{r}
#| label: setup energy sources gallons
#| echo: false
gallon_sources <- double_basics |>
  select('Gallons of Heating Oil', 'Gallons of Propane', 'Gallons of Kerosene')|>
  pivot_longer(cols = c('Gallons of Heating Oil', 'Gallons of Propane', 'Gallons of Kerosene' ),
    names_to = "Source", 
    values_to = "Amount")

gallon_cost <- double_basics|>
  select('Cost in Dollars (Heating Oil)', 'Cost in Dollars (Propane)', 'Cost in Dollars (Kerosene)')|>
  pivot_longer(cols = c('Cost in Dollars (Heating Oil)', 'Cost in Dollars (Propane)', 'Cost in Dollars (Kerosene)'),
    names_to = "Source_Cost", 
    values_to = "Dollars")

annual_totals_gallon <- gallon_sources |>
  cbind(gallon_cost) |>
  filter(Amount != is.na(NA))|>
  mutate(Anual_Totals = paste0(`Amount`, " Gallons,", `Dollars`, "USD"))

annual_totals_gallon <- annual_totals_gallon |>
  mutate(Source = recode(Source,  'Gallons of Heating Oil' = 'Annual heating oil usage from bills:', 'Gallons of Propane' = 'Annual propane usage from bills:', 'Gallons of Kerosene' = 'Annual kerosene usage from the bills:'))

annual_totals_gallon <- annual_totals_gallon[, -c(2,3,4)]
```

```{r}
#| label: setup energy sources kWh
#| echo: false
kWh_sources <- double_basics |>
  select('kWh of Electricity')|>
  pivot_longer(cols = c('kWh of Electricity'),
    names_to = "Source", 
    values_to = "Amount")

kWh_cost <- double_basics|>
  select('kWh of Electricity')|>
  pivot_longer(cols = c('kWh of Electricity'),
    names_to = "Source_Cost", 
    values_to = "Dollars")

annual_totals_kWh <- kWh_sources |>
  cbind(gallon_cost) |>
  filter(Amount != is.na(NA))|>
  mutate(Anual_Totals = paste(`Amount`, " kWh,", `Dollars`, "USD"))|>
  mutate(Source = recode(Source,  'kWh of Electricity' = 'Annual electricity usage from bills:',))

annual_totals_kWh <- annual_totals_kWh[, -c(2,3,4)]
```

```{r}
#| label: setup energy sources cords
#| echo: false
cords_sources <- double_basics |>
  select('Cords of Firewood')|>
  pivot_longer(cols = c('Cords of Firewood'),
    names_to = "Source", 
    values_to = "Amount")

cords_cost <- double_basics|>
  select('Cords of Firewood')|>
  pivot_longer(cols = c('Cords of Firewood'),
    names_to = "Source_Cost", 
    values_to = "Dollars")

annual_totals_cords <- cords_sources |>
  cbind(cords_cost) |>
  filter(Amount != is.na(NA))|>
  mutate(Anual_Totals = paste(`Amount`, " Cords,", `Dollars`, "USD"))|>
   mutate(Source = recode(Source, 'Cords of Firewood' = 'Annual firewood usage from bills:',))

annual_totals_cords <- annual_totals_cords[, -c(2,3,4)]
```

```{r}
#| label: setup energy sources tons
#| echo: false
tons_sources <- double_basics |>
  select('Tons of pellets')|>
  pivot_longer(cols = c('Tons of pellets'),
    names_to = "Source", 
    values_to = "Amount")

tons_cost <- double_basics|>
  select('Tons of pellets')|>
  pivot_longer(cols = c('Tons of pellets'),
    names_to = "Source_Cost", 
    values_to = "Dollars")

annual_totals_tons <- tons_sources |>
  cbind(tons_cost) |>
  filter(Amount != is.na(NA))|>
  mutate(Anual_Totals = paste(`Amount`, " Tons,", `Dollars`, "USD"))|>
   mutate(Source = recode(Source,  'Tons of pellets' = 'Annual pellets usage from bills:',))

annual_totals_tons <- annual_totals_tons[, -c(2,3,4)]
```

```{r}
#| label: setup energy sources other
#| echo: false
other_sources <- double_basics |>
  select('Write the quantity and measuring unit')|>
  pivot_longer(cols = c('Write the quantity and measuring unit'),
    names_to = "Source", 
    values_to = "Amount")

other_cost <- double_basics|>
  select('Write the quantity and measuring unit')|>
  pivot_longer(cols = c('Write the quantity and measuring unit'),
    names_to = "Source_Cost", 
    values_to = "Dollars")

annual_totals_other <- other_sources |>
  cbind(other_cost) |>
  filter(Amount != is.na(NA))|>
  mutate(Anual_Totals = paste(`Amount`, `Dollars`, "USD"))|>
  mutate(Source = recode(Source,  'Write the quantity and measuring unit' = 'Other annual energy usage from bills:',))

annual_totals_other <- annual_totals_other[, -c(2,3,4)]
```

```{r}
#| label: annual totals for energy sources chapter 3
#| echo: false
annual_totals <- annual_totals_kWh|>
  rbind(annual_totals_gallon, annual_totals_cords, annual_totals_tons )

names(annual_totals) <- c('Info', 'Values')
```

```{r}
#| label: all basics
#| echo: false

all_basics <- double_other |>
  rbind(attic_basics,annual_totals )|> #character_other,
  arrange(factor(Info, levels = c('Date Built', 'Foundation Type', 'Attic', 'Number of floors', 'Square footage of conditioned space', 'Volume of conditioned space (cubic feet)','Ambient Carbon Monoxide reading')))
```

```{r}
#| label: setup data 3.2 not finished
#| echo: false
#| eval: false

exterior_n <- clean_audit_data|>
  select(roof_type, roof_age, condition_of_the_roof, orientation_of_the_primary_roof_faces, comment_about_condition_of_the_roof, existing_moisture_control_strategies, condition_of_moisture_control_strategies, comments_about_existing_moisture_control_strategies, siding_type, condition_of_the_siding, comment_about_condition_of_the_siding, door_s_type_2_insulated, door_s_type_2_hollow, door_s_type_2_glass_door, condition_fit_of_the_doors_of_this_type_2, number_of_doors_of_this_type_2, total_door_area_of_this_type_2_174, door_s_type_1_insulated, door_s_type_1_hollow, door_s_type_1_glass_door, condition_fit_of_the_doors_of_this_type_1, number_of_doors_of_this_type_1, total_door_area_of_this_type_1, door_s_type_3_insulated, door_s_type_3_hollow, door_s_type_3_glass_door, condition_fit_of_the_doors_of_this_type_3, number_of_doors_of_this_type_3, total_door_area_of_this_type_3_178, how_many_windows_of_this_type_there_are_1, how_many_windows_of_this_type_there_are_2, how_many_windows_of_this_type_there_are_3, how_many_windows_of_this_type_there_are_4, how_many_windows_of_this_type_there_are_5) #'How many windows of this type there are? | 1', 'Number of panes in windows of this type and material | 1 [single]', 'Number of panes in windows of this type and material | 1 [double]', 'Number of panes in windows of this type and material | 1 [triple]', 'Condition of the windows of this type? | 1', 'More about condition of the windows of this type | 1', 'Total windows areas of this type? | 1'

```

```{r}
#| label: setup exterior data 3.2
#| echo: false

exterior_3.2 <- clean_audit_data|>
  select(roof_type, roof_age, condition_of_the_roof, orientation_of_the_primary_roof_faces, comment_about_condition_of_the_roof, existing_moisture_control_strategies, condition_of_moisture_control_strategies, comments_about_existing_moisture_control_strategies,siding_type, comment_about_condition_of_the_siding, condition_of_the_siding)|>
  
  #remove values with N/A
  #mutate(select() str_detect(`Energy Sources`, pattern = #"[Hh]eat|Kerosene|Propane|Firewood|Pellets|Other"))
  
  #join information into one column for roof type in 3.2
  mutate('Roof type:'= paste0(roof_type, "in ",  condition_of_the_roof ,"condition. ", comment_about_condition_of_the_roof))|>
  
  #join information into one column for moisture control in 3.2
  mutate('Moisture control:' = paste0("Current moisture control strategies: ", existing_moisture_control_strategies,'.  These were in ',condition_of_moisture_control_strategies, ' condition .',comments_about_existing_moisture_control_strategies))|>
  
  #join information into one column for siding in 3.2
  mutate('Siding:' = paste0(siding_type,' in ', condition_of_the_siding, ' condition. ', comment_about_condition_of_the_siding))|>
  
  #delete unwanted columns, the once that were used to create joined columns
  select(-c(1,3,5:11))|>
  
  #pivot horizontal columns to be displayed vertical in the rows
  pivot_longer(cols = everything() ,
    names_to = "Info" ,
    values_to = "Values")|>
  
  #rename the columns as they need to be displayed
  mutate(Info = recode(Info,  roof_age = 'Roof age:', orientation_of_the_primary_roof_faces = 'Orientation:'))

```

```{r}
#| label: setup interior/living spaces for 3.3
#| echo: false

all_interior <- clean_audit_data|>
  
  #select all the columns that have information about the interior/living spaces
  select(wall_stud_insulation_type, thickness_of_the_wall_stud_insulation, quality_of_wall_stud_insulations_installation_assess_worst_part_of_installation, any_additional_comments_on_wall_stud_insulation, wall_continuous_insulation_type, thickness_of_the_wall_continuous_insulation, quality_of_wall_continuous_insulations_installation_assess_worst_part_of_installation, any_additional_comments_on_wall_continuous_insulation, framing_type, general_comment_about_the_living_room, general_comment_about_the_bathroom_s, general_comment_about_the_kitchen, k_wh_reading_1, k_wh_reading_2, time_passed_since_installation_of_kilowatt_meter_1, time_passed_since_installation_of_kilowatt_meter_2, which_appliance_did_you_measure_1, which_appliance_did_you_measure_2)|>

 #join information into one column for stud insulation in 3.3
  mutate('Walls:'= paste0("Walls framing is ", framing_type , " type. There is ", wall_stud_insulation_type, " insulation ", thickness_of_the_wall_stud_insulation, " inches thick in ", quality_of_wall_stud_insulations_installation_assess_worst_part_of_installation, " condition. ", any_additional_comments_on_wall_stud_insulation))|>
  
  #join information into one column for kitchen in 3.3
  mutate('Kitchen:'= paste0(which_appliance_did_you_measure_1, " used ", k_wh_reading_1, " kWh in ", time_passed_since_installation_of_kilowatt_meter_1, " minutes. ", which_appliance_did_you_measure_2, " used ", k_wh_reading_2, " kWh in ", time_passed_since_installation_of_kilowatt_meter_2, " minutes. ", general_comment_about_the_kitchen ))|>
  
  #delete unwanted columns, the once that were used to create joined columns
  select(-c(1:9, 12:18))|>
  
  #pivot horizontal columns to be displayed vertical in the rows
  pivot_longer(cols = everything() ,
    names_to = "Info" ,
    values_to = "Values")|>
  
  #rename the columns as they need to be displayed
  mutate(Info = recode(Info,  general_comment_about_the_living_room = 'Living room:', general_comment_about_the_bathroom_s = 'Bathroom(s):'))|>
  
  #arrange the rows in wanted order
  arrange(factor(Info, levels = c('Walls:')))
```

```{r}
#| label: setup siding old
#| echo: false
#| eval: false

siding <- exterior |>
  select('Siding type', 'Condition of the siding?', 'Comment about condition of the siding') |>
  mutate(Info = paste(`Siding type`,'in ', `Condition of the siding?`, 'condition .', `Comment about condition of the siding`))#|>

siding <- siding[, -c(1:3)]

siding <- siding|>
  pivot_longer(cols = Info ,
    names_to = "Info" ,
    values_to = "Values")|>
  mutate(Info = recode(Info,  'Info' = 'Siding:',))
```

```{r}
#| label: setup exterior doors old
#| echo: false
#| eval: false

doors <- exterior |>
  select('Door(s) type | 1', 'Number of doors of this type | 1', 'Total door area of this type | 1') |>
  mutate(Info = paste(`Number of doors of this type | 1`, `Door(s) type | 1`,'door. Totaling ', `Total door area of this type | 1`, 'square feet.'))#|>

doors <- doors[, -c(1:3)]

doors <- doors|>
  pivot_longer(cols = Info ,
    names_to = "Info" ,
    values_to = "Values")|>
  mutate(Info = recode(Info,  'Info' = 'Exterior doors:',))
```

```{r}
#| label: setup windows old
#| echo: false
#| eval: false

windows <- exterior |>
  select('How many windows of this type there are? | 1', 'Number of panes in windows of this type and material | 1 [single]', 'Number of panes in windows of this type and material | 1 [double]', 'Number of panes in windows of this type and material | 1 [triple]', 'Condition of the windows of this type? | 1', 'More about condition of the windows of this type | 1', 'Total windows areas of this type? | 1') |>
  mutate(Info = paste(`How many windows of this type there are? | 1`, `Number of panes in windows of this type and material | 1 [single]`, `Number of panes in windows of this type and material | 1 [double]`, `Number of panes in windows of this type and material | 1 [triple]`, `Condition of the windows of this type? | 1`, `More about condition of the windows of this type | 1`, `Total windows areas of this type? | 1`))#|>

windows <- windows[, -c(1:7)]

windows <- windows|>
  pivot_longer(cols = Info ,
    names_to = "Info" ,
    values_to = "Values")|>
  mutate(Info = recode(Info,  'Info' = 'Windows:',))
```

```{r}
#| label: 3.2 table setup old
#| echo: false
#| eval: false

all_exterior <- roof_type_all |>
  rbind(roof_moisture_control, siding, doors, windows )#|>
  #arrange(factor(Info, levels = c('Date Built', 'Foundation Type', 'Attic', 'Number of floors', 'Square footage of conditioned space', 'Volume of conditioned space (cubic feet)','Ambient Carbon Monoxide reading')))
```

```{r}
#| label: 3.4 data set up
#| echo: false
blower_door_leakage <- energy_test_googlesheets|>
  select( "Equivalent leakage area")|>
  mutate(`Equivalent leakage area` = paste0(`Equivalent leakage area`, " under natural conditions."))

#blower_door_leakage <-blower_door_leakage[,-c(1)]

blower_door_leakage <-blower_door_leakage|>
  pivot_longer(c("Equivalent leakage area"),
    names_to = "Info", 
    values_to = "Values")

blower_door <- energy_test_googlesheets|>
  select(c("CFM50", "ACH50","ACHn", ))|> #there is another column "Comments about air leakage"
  pivot_longer(c("CFM50", "ACH50","ACHn"),
    names_to = "Info", 
    values_to = "Values")

all_blower_door <- blower_door|>
  rbind(blower_door_leakage)|>
  mutate(Info = recode(Info,  "CFM50" = "CFM50:", "ACH50" = "ACH50:","Equivalent leakage area" = "Equivalent leakage area:","ACHn" = "ACHnatural:" ))|>
  arrange(factor(Info, levels = c('CFM50:', 'ACH50:', 'Equivalent leakage area:', 'ACHnatural:')))

all_blower_door['Description'] <- c("CFM50 describes how many cubic feet per minute of air are leaving the house at 50 pascals of pressure difference (while the blower door is running). For every cubic foot of air that leaves the house, a cubic foot of air enters the house as well. The higher the number, the leakier the house.", "ACH50 tells us how many air changes per hour are taking place in the house at 50 pascals of pressure difference. This value is normalized for the volume of the house and thus allows for comparison between different houses. The higher the number, the leakier the house.","This is the area (in square inches) equivalent to all of the air leaks in the house combined.","Accounting for the volume of the home, this means that the house exchanges –% of its air every hour. Over one day, the house goes through – complete air changes.")
```

```{r}
#| label: attic data for 3.5
#| echo: false

attic_double <- energy_test_googlesheets|>
  select(`Attic Area`)|> # `Thickness of the attic insulation (inches), at the thinnest location`
  pivot_longer(c(`Attic Area`),
    names_to = "Info",
    values_to = "Values")

attic_character <- energy_test_googlesheets|>
  select(`Does attic have air sealing?`, `Comment about air sealing`, `Any additional comments on attic insulation, e.g., is the entire attic insulated?`, `Any hazards or mold/moisture/asbestos present in the attic?`, `Describe the hazards or mold/moisture in the attic`, `Is there ductwork in the attic?`, `Comment about condition of the ductwork in the attic`,`Are bathroom and kitchen exhaust fans being vented to outside?`,`Attic ventilation type?`, `Quality of attic insulation's installation? Assess worst part of installation.`,`Attic insulation type`)|>
  mutate(`Air sealing:` = paste0("There is ",`Does attic have air sealing?`,"air sealing. ",`Comment about air sealing`))|>
  mutate(`Other observations:` = paste(`Any additional comments on attic insulation, e.g., is the entire attic insulated?`, `Any hazards or mold/moisture/asbestos present in the attic?`, `Describe the hazards or mold/moisture in the attic`))|>
  mutate(`Ventilation:` = `Are bathroom and kitchen exhaust fans being vented to outside?`,`Attic ventilation type?`)|>
  mutate(`Ducts:` = `Is there ductwork in the attic?`, `Comment about condition of the ductwork in the attic`)

attic_character <- attic_character[, -c(1:9)]
  
attic_character <- attic_character|>
  pivot_longer(cols = everything(),
  names_to = "Info",
   values_to = "Values")

all_attic <- attic_double|>
  rbind(attic_character)|>
  arrange((factor(Info, levels = c("Attic Area","Attic insulation type", "Quality of attic insulation's installation? Assess worst part of installation.", "Air sealing:","Other observations:","Ventilation:","Ducts:" ))))|>
  mutate(Info = recode(Info,"Attic Area" = "Area (sq ft):","Attic insulation type" = "Insulation type:", "Quality of attic insulation's installation? Assess worst part of installation." = "Insulation condition:"  ))#|>
  #filter(str_detect(Values, pattern = "No"))
```

```{r}
#| label: basement data for 3.6
#| echo: false

all_basement <- clean_audit_data|>
  
  #select all the columns that have information about the basement/crawlspace
  select(is_there_ductwork_in_the_basement_crawlspace, comment_about_ductwork_condition_in_the_basement_crawlspace, comment_about_the_basement_crawlspace_insulation, hazards_basement_crawlspace, any_hazards_or_mold_moisture_asbestos_present_in_the_basement_crawlspace, describe_the_hazards_or_mold_moisture_in_basement_crawlspace, quality_of_the_basement_crawlspace_insulations_installation_assess_worst_part_of_installation, moisture_and_mold_control_strategies, basement_crawlspace_insulation_type, insulation_of_appliances_in_basement_crawlspace, area_of_basement_crawlspace_ground_square_feet, thickness_of_basement_crawlspace_insulation, basement_crawlspace_net_wall_area, condition_of_moisture_control_strategies_in_the_basement_crawlspace, comments_about_existing_moisture_control_strategies )|>
  
  #join information into one column for moisture control in 3.6
  mutate(`Moisture Control:` = paste0(moisture_and_mold_control_strategies, "in ",condition_of_moisture_control_strategies_in_the_basement_crawlspace,"condition. ", comments_about_existing_moisture_control_strategies))|>
  
  #join information into one column for ducts in 3.6
  mutate(`Ducts:` = paste0(is_there_ductwork_in_the_basement_crawlspace,comment_about_ductwork_condition_in_the_basement_crawlspace))|>
  
  #join information into one column for insulation condition in 3.6
  mutate(`Insulation condition:` = paste0(quality_of_the_basement_crawlspace_insulations_installation_assess_worst_part_of_installation, comment_about_the_basement_crawlspace_insulation))|>
  
  #join information into one column for other observations in 3.6
  mutate(`Other observations:` = paste0("There is ", hazards_basement_crawlspace, describe_the_hazards_or_mold_moisture_in_basement_crawlspace))|>
  
  #delete unwanted columns, the once that were used to create joined columns
  select(-c(1:8, 12:15))|>
  
  #pivot horizontal columns to be displayed vertical in the rows
  pivot_longer(, cols = everything(),
    names_to = "Info",
    values_to = "Values")|>
  
  #rename the columns as they need to be displayed
  mutate(Info = recode(Info,  area_of_basement_crawlspace_ground_square_feet = 'Area (sq ft):', insulation_of_appliances_in_basement_crawlspace = 'Insulation of appliances:', 	
basement_crawlspace_insulation_type = 'Inuslation type:'))|>
  
  #arrange the rows in correct order
  arrange(factor(Info, levels = c('Area (sq ft):','Inuslation type:', 'Insulation condition:')))

```

```{r}
#| label: house image path setup
#| echo: false
#| warning: false

# Unique identifier for the image
image_id <- "House_photo_placeholder"

# Generate the file path for the image based on the identifier
image_path <- paste0("", image_id, ".png")


```

```{r, out.width = "50%", fig.align = 'center'}
#| label: image render
#| echo: false
#| warning: false
#| eval: false

# Include the image in the report
knitr::include_graphics(image_path,)
```

Homeowner(s): `r clean_audit_data$homeowner_s`

Address: `r clean_audit_data$home_address`

Auditors: `r clean_audit_data$names_of_the_auditors`

Contact: mdicommunityenergy\@coa.edu, 802 266 0301

Date: `r format(Sys.time(), '%e %B %Y')`

------------------------------------------------------------------------

We conducted an energy assessment of your home on `r clean_audit_data$date_of_audit`. This report will tell you what we did, what we found, and what we suggest for your home. These suggestions include information on incentives and financing to make improvements more affordable.

------------------------------------------------------------------------

![](images/Logos-together.png)

Add here the table of content: in Word go to references and add table of content, in Docs go to the insert and on the bottom add the table of context

## Summary of your Audit

### Visual Inspection and Measurements

We started with a tour and visual inspection of the inside and outside of the home. We identified any visible damage to the building, moisture control strategies, major appliances, and insulation. We measured square footage and volume of the home, as well as the area of all exterior windows and doors. We used a kill-a-watt meter to measure the electricity use of some appliances. During your audit, we used a carbon monoxide meter to measure the ambient carbon monoxide levels throughout the home.

### Attic

We entered the attic to check for insulation, air sealing, ventilation, and potential hazards such as mold. Additionally, we visually inspected the attic ventilation and any duct and pipework passing through the attic.

### Basement

We visually inspected any appliances in the basement and noted insulation levels, moisture, rodents, and any other concerns.

### Blower Door / Air Leakage Test

We used a large fan in an exterior door to depressurize your house. This allows us to determine the volume of air leakage into the house and to locate bigger air leaks. To find leaks, we used an infrared camera to check for unusually hot and cold spots. We also checked the pressure differences of the rooms to help determine major air leak locations.

```{r}
#| label: data setup for 1.5 chapter
#| echo: false
#| eval: true
#| warning: false

chapter_1.5_header <- clean_audit_data |>
  mutate(combustion_fuels = str_detect(energy_sources, pattern = "[Hh]eat|Kerosene|Propane|Firewood|Pellets|Other"))
  

energy_test_googlesheets <- clean_audit_data |>
  mutate(combustion_propane = str_detect(energy_sources, pattern = "Propane"))

clean_audit_data <- clean_audit_data|>
  mutate(combustionst1 = str_detect(could_you_perform_combustion_safety_tests_in_worst_case_scenario_1, pattern = "Yes"))|>
  mutate(combustionst2 = str_detect(could_you_perform_combustion_safety_tests_2, pattern = "Yes"))|>
  mutate(combustionst3 = str_detect(could_you_perform_combustion_safety_tests_3, pattern = "Yes"))|>
  mutate(combustionst4 = str_detect(could_you_perform_combustion_safety_tests_4, pattern = "Yes"))
  
```

```{r}
#| label: header chapter 1.5
#| echo: false
#| results: asis

if (chapter_1.5_header$combustion_fuels == TRUE) {
cat("### Combustion Appliance Safety")
} else {
cat(" ")
}
```

```{r}
#| label: text in 1.5 chapter
#| echo: false
#| warning: false
#| results: asis


if (clean_audit_data$combustionst1 == TRUE) {
  cat("We assessed combustion appliances that burn fossil fuels such as propane, heating oil, or kerosene. These include furnaces, boilers, water heaters, and gas ovens. We visually inspected the combustion appliance(s) in your home, as well as conducted combustion safety tests. This included measuring for carbon monoxide and testing that flue gases are properly exhausting from the home.")
}  else if (clean_audit_data$combustionst1 == FALSE) {
  cat("We assessed combustion appliances that burn fossil fuels such as propane, heating oil, or kerosene. These include furnaces, boilers, water heaters, and gas ovens. We visually inspected the combustion appliance(s) in your home, but we were unable to perform combustion safety tests.")
} else {
  cat("")
}
if(energy_test_googlesheets$combustion_propane == TRUE){
  cat(" We also performed gas leak detection tests on your propane appliance(s).")
}else{
  cat("")
}

#else if (clean_audit_data$combustionst2 == TRUE) {
  #cat("We assessed combustion appliances that burn fossil fuels such as propane, heating oil, or kerosene. These include furnaces, boilers, water heaters, and gas ovens. We visually inspected the combustion appliance(s) in your home, as well as conducted combustion safety tests. This included measuring for carbon monoxide and testing that flue gases are properly exhausting from the home.")
#}  else if (clean_audit_data$combustionst3 == TRUE) {
 # cat("We assessed combustion appliances that burn fossil fuels such as propane, heating oil, or kerosene. These include furnaces, boilers, water heaters, and gas ovens. We visually inspected the combustion appliance(s) in your home, as well as conducted combustion safety tests. This included measuring for carbon monoxide and testing that flue gases are properly exhausting from the home.")
#}  else if #(clean_audit_data$combustionst4 == TRUE) {
  #cat("We assessed combustion appliances that burn fossil fuels such as propane, heating oil, or kerosene. These include furnaces, boilers, water heaters, and gas ovens. We visually inspected the combustion appliance(s) in your home, as well as conducted combustion safety tests. This included measuring for carbon monoxide and testing that flue gases are properly exhausting from the home.")
#} else if (clean_audit_data$combustionst1 == FALSE) {
 # cat("We assessed combustion appliances that burn fossil fuels such as propane, heating oil, or kerosene. These include furnaces, boilers, water heaters, and gas ovens. We visually inspected the combustion appliance(s) in your home, but we were unable to perform combustion safety tests.")
#}  else if (clean_audit_data$combustionst2 == FALSE) {
 # cat("We assessed combustion appliances that burn fossil fuels such as propane, heating oil, or kerosene. These include furnaces, boilers, water heaters, and gas ovens. We visually inspected the combustion appliance(s) in your home, but we were unable to perform combustion safety tests.")
#}  else if (clean_audit_data$combustionst3 == FALSE) {
 # cat("We assessed combustion appliances that burn fossil fuels such as propane, heating oil, or kerosene. These include furnaces, boilers, water heaters, and gas ovens. We visually inspected the combustion appliance(s) in your home, but we were unable to perform combustion safety tests.")
#}  else if (clean_audit_data$combustionst4 == FALSE) {
 # cat("We assessed combustion appliances that burn fossil fuels such as propane, heating oil, or kerosene. These include furnaces, boilers, water heaters, and gas ovens. We visually inspected the combustion appliance(s) in your home, but we were unable to perform combustion safety tests.")
```

```{r}
#| label: gas option in 1.5 chapter
#| echo: false
#| results: asis
#| eval: false

if(energy_test_googlesheets$combustion_propane == TRUE){
  cat("We also performed gas leak detection tests on your propane appliance(s).")
}else{
  cat("")
  }
```

## Summary of Recommendations

We recommend the following upgrades for your home. Detailed information about these recommendations and financial resources can be found later in this report.

```{r}
#| label: 2. summery table
#| eval: true
#| echo: false
gt_ranked_recommendations <- gt(ranked_clean_recommendations) |>
  tab_options(table.width = pct(100))|>
  cols_width(
    Recommendation ~ px(200),
    Description ~ px(450)
  )

gt_ranked_recommendations
```

## What We Found

### Basics

```{r}
#| label: 3.1 basics table
#| eval: true
#| echo: false
gt_all_basics <- gt(all_basics) |>
  tab_options(table.width = pct(100))|>
  cols_width(
    Info ~ px(200),
    Values ~ px(450)
  )|>
  cols_label(
    Info = "",
    Values = ""
  )
  

gt_all_basics
```

### Exterior

```{r}
#| label: 3.2 Exterior table
#| eval: true
#| echo: false
gt_exterior_3.2 <- gt(exterior_3.2) |>
  tab_options(table.width = pct(100))|>
  cols_width(
    Info ~ px(200),
    Values ~ px(450)
  )|>
  cols_label(
    Info = "",
    Values = ""
  )#|>
  #tab_style(
    #style = cell_borders(
     # sides = "all",
     # color = "blue",
     # weight = px(3)
   # ),
   # locations = list(cells_column_labels())
 # )

gt_exterior_3.2

#kableExtra::kable(all_exterior)
```

### Interior/Living space

```{r}
#| label: 3.3 interior
#| eval: true
#| echo: false
gt_all_interior <- gt(all_interior) |>
  tab_options(table.width = pct(100))|>
  cols_width(
    Info ~ px(150),
    Values ~ px(100)
  )|>
  cols_label(
    Info = "",
    Values = ""
  )

gt_all_interior
```

### Blower Door / Air Leakage Test

A blower door test simulates a 20mph wind hitting your house from all sides.

To run the test, we used a large fan in an exterior door to depressurize your house. As air is pulled out through the fan, an equal volume of air is pulled in through all of the gaps, cracks, and air leaks throughout the house. This allows us to determine the volume of air leakage into the house and to locate bigger air leaks. 

To find leaks, we used an infrared camera to check for unusually hot and cold spots. We also checked the pressure differences of the rooms to help determine major air leak locations.

Air leaks are a big source of heat gain in warm weather and heat loss in cold weather. They also allow moisture to get into the home. Below are some numbers, pictures, and descriptions explaining what we found.

```{r}
#| label: 3.4 blower door table
#| eval: true
#| echo: false
gt_all_blower_door <- gt(all_blower_door) |>
  tab_options(table.width = pct(100))|>
  cols_width(
    Info ~ px(150),
    Values ~ px(100),
    Description ~ px(400)
  )|>
  cols_label(
    Info = "",
    Values = "",
    Description = ""
  )

gt_all_blower_door
```

Using a thermal imaging camera, we looked for major air leakage locations and thermal bridging, where heat is bypassing the insulation. There was evidence of ….

### Attic

```{r}
#| label: 3.5 attic table
#| eval: true
#| echo: false
gt_all_attic <- gt(all_attic) |>
  tab_options(table.width = pct(100))|>
  cols_width(
    Info ~ px(200),
    Values ~ px(450),
  )|>
  cols_label(
    Info = "",
    Values = ""
  )

gt_all_attic
```

### Basement

```{r}
#| label: 3.6 basement/crawlspace table
#| eval: true
#| echo: false
gt_all_basement <- gt(all_basement) |>
  tab_options(table.width = pct(100))|>
  cols_width(
    Info ~ px(200),
    Values ~ px(450),
  )|>
  cols_label(
    Info = "",
    Values = ""
  )

gt_all_basement
```

### Electrical and Mechanical Systems

```{r}
#| label: setup 3.7 table
#| echo: false

all_electrical_mechanical <- clean_audit_data|>
  
  #select only needed columns
  select(amperage_of_breaker_panel, number_of_unused_breaker_spaces, comment_about_condition_of_the_panel_breakers_e_g_are_there_fuses_water_damage)|>
  
  #join information into one column for breaker panel in 3.7
  mutate('Electrical panel:'= paste0("The electrical panel has and  amperage of ", amperage_of_breaker_panel, ". There are ", number_of_unused_breaker_spaces, " unused breaker spaces. ", comment_about_condition_of_the_panel_breakers_e_g_are_there_fuses_water_damage))|>
  
  #delete unwanted columns, the once that were used to create joined columns
  select(-c(1:3))|>
  
  #pivot horizontal columns to be displayed vertical in the rows
  pivot_longer(cols = everything() ,
    names_to = "Info" ,
    values_to = "Values")
  
gt_all_electrical_mechanical <- gt(all_electrical_mechanical) |>
  tab_options(table.width = pct(100))|>
  cols_width(
    Info ~ px(200),
    Values ~ px(450),
  )|>
  cols_label(
    Info = "",
    Values = ""
  )

gt_all_electrical_mechanical

```


### Energy Bills

```{r}
#| label: setup section 3.8
#| echo: false

quantity_energy_bills <- clean_audit_data|>
  
  #select all the columns that will be used
  select(gallons_of_heating_oil, gallons_of_kerosene, gallons_of_propane, k_wh_of_electricity, cords_of_firewood,  tons_of_pellets, write_the_quantity_and_measuring_unit)|>
  
   #pivot horizontal columns to be displayed vertical in the rows
  pivot_longer(cols = c(gallons_of_heating_oil, gallons_of_kerosene, gallons_of_propane, k_wh_of_electricity, cords_of_firewood,  tons_of_pellets, write_the_quantity_and_measuring_unit),
    names_to = "Type" ,
    values_to = "kWh/gallons/cords/tonns")|>
  mutate(Type = recode(Type, gallons_of_heating_oil = "Heating oil", gallons_of_kerosene = "Kerosene" , gallons_of_propane = "Propane", k_wh_of_electricity = "Electricity", cords_of_firewood = "Firewood",  tons_of_pellets = "Pellets", write_the_quantity_and_measuring_unit = "Type the name of other energy source"))
  

cost_energy_bills <- clean_audit_data|>
  select(cost_in_dollars_heating_oil, cost_in_dollars_kerosene, cost_in_dollars_propane, cost_in_dollars_electricity, cost_in_dollars_firewood, cost_in_dollars_pellets, cost_in_dollars_other)|>
  
  #pivot horizontal columns to be displayed vertical in the rows
  pivot_longer(cols = c(cost_in_dollars_heating_oil, cost_in_dollars_kerosene, cost_in_dollars_propane, cost_in_dollars_electricity, cost_in_dollars_firewood, cost_in_dollars_pellets, cost_in_dollars_other),
    names_to = "Type2" ,
    values_to = "Cost (USD)")

all_energy_bills <- quantity_energy_bills|>
  cbind(cost_energy_bills)|>
   filter(`Cost (USD)` != is.na(NA))|>
   select(-3)

gt_all_energy_bills <- gt(all_energy_bills) |>
  tab_options(table.width = pct(100))|>
  cols_width(
    Type ~ px(220),
    `kWh/gallons/cords/tonns` ~ px(220),
    `Cost (USD)` ~ px(220)
  )

gt_all_energy_bills
  
```


## Recommendations

```{r}
#| label: setup data for recommendations 4.0
#| echo: false
#| eval: true

furnice_boiler_tune_up <- clean_audit_data|>
  select(recommendations_ranking_furnace_boiler_tune_up)|>
  mutate(furnice_boiler_tune_up = str_detect(recommendations_ranking_furnace_boiler_tune_up, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_furnace_boiler_tune_up)

high_efficiency_shower_heads<- clean_audit_data|>
  select(recommendations_ranking_high_efficiency_showerhead_s)|>
  mutate(high_efficiency_shower_heads = str_detect(recommendations_ranking_high_efficiency_showerhead_s, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_high_efficiency_showerhead_s)

led<- clean_audit_data|>
  select(recommendations_ranking_le_ds)|>
  mutate(led= str_detect(recommendations_ranking_le_ds, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_le_ds)

window_dressers <- clean_audit_data|>
  select(recommendations_ranking_window_dressers)|>
  mutate(window_dressers = str_detect(recommendations_ranking_window_dressers, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_window_dressers)

refrigerator <- clean_audit_data|>
  select(recommendations_ranking_refrigerator)|>
  mutate(refrigerator = str_detect(recommendations_ranking_refrigerator, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_refrigerator)

 freezer<- clean_audit_data|>
  select(recommendations_ranking_freezer)|>
  mutate(freezer = str_detect(recommendations_ranking_freezer, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_freezer)
 
induction_stove<- clean_audit_data|>
  select(recommendations_ranking_induction_stove)|>
  mutate(induction_stove = str_detect(recommendations_ranking_induction_stove, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_induction_stove)

heatpwh <- clean_audit_data|>
  select(recommendations_ranking_heat_pump_water_heater)|>
  mutate(heatpwh = str_detect(recommendations_ranking_heat_pump_water_heater, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_heat_pump_water_heater)

gutters <- clean_audit_data|>
  select(recommendations_ranking_gutters)|>
  mutate(gutters= str_detect(recommendations_ranking_gutters, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_gutters)

bathroom_exhaust_fan <- clean_audit_data|>
  select(recommendations_ranking_bathroom_exhaust_fan)|>
  mutate(bathroom_exhaust_fan = str_detect(recommendations_ranking_bathroom_exhaust_fan, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_bathroom_exhaust_fan)

kitchen_exhaust_fan <- clean_audit_data|>
  select(recommendations_ranking_kitchen_exhaust_fan)|>
  mutate(kitchen_exhaust_fan= str_detect(recommendations_ranking_kitchen_exhaust_fan, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_kitchen_exhaust_fan)

vapor_barrier <- clean_audit_data|>
  select(recommendations_ranking_vapor_barrier)|>
  mutate(vapor_barrier = str_detect(recommendations_ranking_vapor_barrier, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_vapor_barrier)

spray_foam <- clean_audit_data|>
  select(recommendations_ranking_spray_foam_basement_walls)|>
  mutate(spray_foam = str_detect(recommendations_ranking_spray_foam_basement_walls, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_spray_foam_basement_walls)

attic_air_sealing_and_insulation <- clean_audit_data|>
  select(recommendations_ranking_attic_air_sealing_and_insulation)|>
  mutate(attic_air_sealing_and_insulation = str_detect(recommendations_ranking_attic_air_sealing_and_insulation, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_attic_air_sealing_and_insulation)

wall_stud_insulation <- clean_audit_data|>
  select(recommendations_ranking_blown_in_cellulose_wall_insulation)|>
  mutate(wall_stud_insulation = str_detect(recommendations_ranking_blown_in_cellulose_wall_insulation, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_blown_in_cellulose_wall_insulation)

continuous_wall_insulation <- clean_audit_data|>
  select(recommendations_ranking_continuous_exterior_wall_insulation)|>
  mutate(continuous_wall_insulation = str_detect(recommendations_ranking_continuous_exterior_wall_insulation, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_continuous_exterior_wall_insulation)

electrical_panel <- clean_audit_data|>
  select(recommendations_ranking_electrical_panel_upgrade)|>
  mutate(electrical_panel = str_detect(recommendations_ranking_electrical_panel_upgrade, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_electrical_panel_upgrade)

airsource_hp <- clean_audit_data|>
  select(recommendations_ranking_air_source_heat_pump)|>
  mutate(airsource_hp = str_detect(recommendations_ranking_air_source_heat_pump, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_air_source_heat_pump)

ev <- clean_audit_data|>
  select(recommendations_ranking_ev_charger)|>
  mutate(ev = str_detect(recommendations_ranking_ev_charger, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_ev_charger)

solar <- clean_audit_data|>
  select(recommendations_ranking_solar)|>
  mutate(solar = str_detect(recommendations_ranking_solar, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_solar)

other <- clean_audit_data|>
  select(recommendations_ranking_other)|>
  mutate(other = str_detect(recommendations_ranking_other, pattern = "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21"))|>
  select(-recommendations_ranking_other)
```

```{r}
#| label: furnace boiler tune up recommendation
#| echo: false
#| results: asis


if(furnice_boiler_tune_up == TRUE){
  cat("### Furnice/boiler tune up
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }

```

```{r}
#| label: high efficiency shower head(s) recommendation
#| echo: false
#| results: asis


if( high_efficiency_shower_heads == TRUE){
  cat("### High efficiency shower head(s)
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }

```

```{r}
#| label: leds recommendation
#| echo: false
#| results: asis


if( led == TRUE){
  cat("### LEDs
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }

```

```{r}
#| label: Windows Dressers recommendation
#| echo: false
#| results: asis


if( window_dressers == TRUE){
  cat("### Window Dressers
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }

```

```{r}
#| label: refrigerator recommendation
#| echo: false
#| results: asis


if( refrigerator == TRUE){
  cat("### Refrigerator
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: freezer recommendation
#| echo: false
#| results: asis


if( freezer == TRUE){
  cat("### Freezer
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: induction stove recommendation
#| echo: false
#| results: asis


if( induction_stove== TRUE){
  cat("### Induction Stove
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: heat pump water heater recommendation
#| echo: false
#| results: asis


if( heatpwh == TRUE){
  cat("### Heat Pump Water Heater
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: Gutters recommendation
#| echo: false
#| results: asis


if( gutters == TRUE){
  cat("### Gutters
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: bathroom exhaust fan(s) recommendation
#| echo: false
#| results: asis


if( bathroom_exhaust_fan == TRUE){
  cat("### Bathroom exhaust fan(s)
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: kitchen exhaust fan recommendation
#| echo: false
#| results: asis


if( kitchen_exhaust_fan == TRUE){
  cat("### Kitchen exhaust fan(s)
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: vapor barrier recommendation
#| echo: false
#| results: asis


if( vapor_barrier == TRUE){
  cat("### Vapor Barrier
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: spray foam recommendation
#| echo: false
#| results: asis


if( spray_foam == TRUE){
  cat("### Spray foam basement walls
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: attic air sealing and insulation recommendation
#| echo: false
#| results: asis


if(attic_air_sealing_and_insulation == TRUE){
  cat("### Attic air sealing and insulation
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: wall stud insulation recommendation
#| echo: false
#| results: asis


if( wall_stud_insulation== TRUE){
  cat("### Wall stud insulation
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: continuous wall insulation recommendation
#| echo: false
#| results: asis


if( continuous_wall_insulation== TRUE){
  cat("### Continuous wall insulation
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: electrical panel upgrade recommendation
#| echo: false
#| results: asis


if( electrical_panel == TRUE){
  cat("### Electrical Panel Upgrade
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: air source heat pump(s) recommendation
#| echo: false
#| results: asis


if( airsource_hp == TRUE){
  cat("### Air source heat pump(s)
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: EV recommendation
#| echo: false
#| results: asis


if( ev == TRUE){
  cat("### Electric Vehicle and charger
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```

```{r}
#| label: solar recommendation
#| echo: false
#| results: asis


if( solar == TRUE){
  cat("### Solar
  
*Problem*

*Recommendation*

*Estimated Cost*
")
}else{
  cat("")
  }
```
